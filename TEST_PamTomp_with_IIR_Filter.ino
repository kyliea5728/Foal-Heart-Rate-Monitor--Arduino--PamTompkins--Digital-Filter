#include <Wire.h> //for I2C
#include <Arduino_LSM6DSOX.h>

#define SAMPLINGRATE 100 //Hz
#define SAMPLINGPERIOD 10 //ms (1/SAMPLINGRATE)
#define ECG_PIN A0
#define REFRACTORY 200 // period to wait before another R-wave is possible (ms)
#define TEST_DATA 500 //size of test data array

// Pan-Tompkins parameters
const int windowSize = 10; // May need tuning -> QRS duration estimated 100ms -> QRS duration(ms)/SAMPLINGPERIOD(ms)
float integratedSignal[windowSize] = {0};
float threshold = 0.5; // Needs to be tuned according to actual QRS amplitude
long lastRPeakTime = 0; //used to store the timestamp of the last detected R-peak. Initially set to 0


const int N = 4; //filter order 

//IIR filter coefficients 
float a[] = {1, -0.173514480931608, -0.509686073269145, 0.00937421452681886, 0.219653983913695};
float b[] = {0.434739348284746, 0, -0.869478696569493, 0, 0.434739348284746};

// Arrays for past samples
float x[N+1] = {0};
float y[N+1] = {0};

const float testData[TEST_DATA] = {2.87783350340218e-137,1.25684138007291e-126,2.01929976923598e-116,1.19351158379274e-106,2.59512331452403e-97,2.07584479010505e-88,6.10853793864176e-80,
6.61279699719503e-72,2.63353214678231e-64,3.85831405896362e-57,2.07951494046179e-50,4.12317751186526e-44,3.00751317294248e-38,8.07027924003171e-33,7.96663837451876e-28,
2.89312477194586e-23,3.8651356637325e-19,1.89962483236415e-15,3.43460226846832e-12,2.28449696170689e-09,5.58997975811805e-07,5.03193941853766e-05,0.00166634948073635,
0.0203002924854919,0.0909795989568949,0.15,0.0909795989568949,0.0203002924854918,0.00166634948073633,5.03193941853772e-05,5.58997975811805e-07,2.28449696170689e-09,
3.43460226846832e-12,1.8996248323641e-15,3.86513566373239e-19,2.89312477194577e-23,7.96663837451876e-28,8.07027924003171e-33,3.00751317294248e-38,4.12317751186526e-44,
2.0795149404617e-50,3.8583140589634e-57,2.63353214678231e-64,6.61279699719503e-72,6.10853793864176e-80,2.07584479010505e-88,2.59512331452381e-97,1.19351158379264e-106,
2.01929976923609e-116,1.25684138007291e-126,2.87783350340218e-137,2.42413262073038e-148,7.51194855991919e-160,8.56356015879566e-172,3.59138214142273e-184,5.54082460273025e-197,
3.14502344181786e-210,7.33786115401029e-210,2.13378994829612e-205,5.55237637475532e-201,1.29285907397047e-196,2.69381976884687e-192,5.02262716353862e-188,8.37989166332065e-184,
1.25109683247582e-179,1.67143119193322e-175,1.99816403705255e-171,2.13756254727719e-167,2.04621649962596e-163,1.75278799731458e-159,1.34354512213737e-155,9.21552708775281e-152,
5.65630944837056e-148,3.10664193063266e-144,1.52684269586402e-140,6.71494484127175e-137,2.6426257403421e-133,9.30623317172376e-130,2.93262988683678e-126,8.26962164935539e-123,
2.08669551112372e-119,4.71169946155089e-116,9.52009183166099e-113,1.72127298211598e-109,2.78486036218291e-106,4.03182945362251e-103,5.22331166516605e-100,6.05528773388889e-97,
6.28157698605655e-94,5.83106182932016e-91,4.84363784357858e-88,3.60031697827339e-85,2.39472071440611e-82,1.42532551901641e-79,7.59133764597358e-77,3.61799209298572e-74,
1.54298596601209e-71,-3.46585823410224e-50,-4.82187461990935e-23,-9.31663293019646e-07,-0.25,3.54032051347466e-06,1.2,3.54032051347466e-06,-0.25,-9.31663293020164e-07,
-4.82187461990935e-23,8.55768262277016e-46,9.62074752768602e-44,9.67807378526769e-42,8.71192438664679e-40,7.01753073686539e-38,5.05824204533973e-36,3.26257082668948e-34,
1.88306515600748e-32,9.72558656410933e-31,4.49480978543686e-29,1.85888228738763e-27,6.87919338457266e-26,2.27807598041372e-24,6.75062446787362e-23,1.79004830613127e-21,
4.24747283844026e-20,9.01864988204237e-19,1.71355284260513e-17,2.91338938694341e-16,4.43245794218296e-15,6.03442328662433e-14,7.35143252456291e-13,8.01407195975949e-12,
7.81771002671078e-11,6.8241872510604e-10,5.33049291064923e-09,3.72587999387666e-08,2.33042651445e-07,1.30432861022755e-06,6.53256418973207e-06,2.92769215304051e-05,
0.000117411919765877,0.000421350998189877,0.00135307204881547,0.00388814878838486,0.00999792527459257,0.0230049850157856,0.0473673491328143,0.0872732730720535,
0.143889301677515,0.212285730899421,0.280258091020883,0.331085814117368,0.35,0.331085814117368,0.280258091020883,0.212285730899421,0.143889301677515,0.0872732730720535,
0.0473673491328143,0.0230049850157856,0.00999792527459257,0.00388814878838486,0.00135307204881547,0.000421350998189877,0.000117411919765877,2.92769215304051e-05,
6.53256418973207e-06,1.30432861022755e-06,2.33042651445009e-07,3.72587999387666e-08,5.33049291064948e-09,6.8241872510604e-10,7.81771002671117e-11,8.01407195975949e-12,
7.35143252456291e-13,6.03442328662433e-14,4.43245794218296e-15,2.91338938694341e-16,1.71355284260513e-17,9.01864988204237e-19,4.24747283844026e-20,1.79004830613127e-21,
6.75062446787362e-23,2.27807598041372e-24,6.87919338457266e-26,1.85888228738763e-27,4.49480978543648e-29,9.72558656410933e-31,1.88306515600748e-32,3.26257082668948e-34,
5.05824204533973e-36,7.01753073686609e-38,8.71192438664679e-40,9.67807378526865e-42,9.62074752768602e-44,8.55802920859455e-46,6.81214319560016e-48,4.85220152774417e-50,
3.09270822612241e-52,1.76394129042294e-54,9.00273280424845e-57,4.11158859486709e-59,1.68031228362174e-61,2.87783350340218e-137,1.25684138007291e-126,2.01929976923598e-116,
1.19351158379274e-106,2.59512331452403e-97,2.07584479010505e-88,6.10853793864176e-80,6.61279699719503e-72,2.63353214678231e-64,3.85831405896362e-57,2.07951494046179e-50,
4.12317751186526e-44,3.00751317294248e-38,8.07027924003171e-33,7.96663837451876e-28,2.89312477194586e-23,3.8651356637325e-19,1.89962483236415e-15,3.43460226846832e-12,
2.28449696170689e-09,5.58997975811805e-07,5.03193941853766e-05,0.00166634948073635,0.0203002924854919,0.0909795989568949,0.15,0.0909795989568949,0.0203002924854918,
0.00166634948073633,5.03193941853772e-05,5.58997975811805e-07,2.28449696170689e-09,3.43460226846832e-12,1.8996248323641e-15,3.86513566373239e-19,2.89312477194577e-23,
7.96663837451876e-28,8.07027924003171e-33,3.00751317294248e-38,4.12317751186526e-44,2.0795149404617e-50,3.8583140589634e-57,2.63353214678231e-64,6.61279699719503e-72,
6.10853793864176e-80,2.07584479010505e-88,2.59512331452381e-97,1.19351158379264e-106,2.01929976923609e-116,1.25684138007291e-126,2.87783350340218e-137,2.42413262073038e-148,
7.51194855991919e-160,8.56356015879566e-172,3.59138214142273e-184,5.54082460273025e-197,3.14502344181786e-210,7.33786115401029e-210,2.13378994829612e-205,5.55237637475532e-201,
1.29285907397047e-196,2.69381976884687e-192,5.02262716353862e-188,8.37989166332065e-184,1.25109683247582e-179,1.67143119193322e-175,1.99816403705255e-171,2.13756254727719e-167,
2.04621649962596e-163,1.75278799731458e-159,1.34354512213737e-155,9.21552708775281e-152,5.65630944837056e-148,3.10664193063266e-144,1.52684269586402e-140,6.71494484127175e-137,
2.6426257403421e-133,9.30623317172376e-130,2.93262988683678e-126,8.26962164935539e-123,2.08669551112372e-119,4.71169946155089e-116,9.52009183166099e-113,1.72127298211598e-109,
2.78486036218291e-106,4.03182945362251e-103,5.22331166516605e-100,6.05528773388889e-97,6.28157698605655e-94,5.83106182932016e-91,4.84363784357858e-88,3.60031697827339e-85,
2.39472071440611e-82,1.42532551901641e-79,7.59133764597358e-77,3.61799209298572e-74,1.54298596601209e-71,-3.46585823410224e-50,-4.82187461990935e-23,-9.31663293019646e-07,-0.25,
3.54032051347466e-06,1.2,3.54032051347466e-06,-0.25,-9.31663293020164e-07,-4.82187461990935e-23,8.55768262277016e-46,9.62074752768602e-44,9.67807378526769e-42,8.71192438664679e-40,
7.01753073686539e-38,5.05824204533973e-36,3.26257082668948e-34,1.88306515600748e-32,9.72558656410933e-31,4.49480978543686e-29,1.85888228738763e-27,6.87919338457266e-26,
2.27807598041372e-24,6.75062446787362e-23,1.79004830613127e-21,4.24747283844026e-20,9.01864988204237e-19,1.71355284260513e-17,2.91338938694341e-16,4.43245794218296e-15,
6.03442328662433e-14,7.35143252456291e-13,8.01407195975949e-12,7.81771002671078e-11,6.8241872510604e-10,5.33049291064923e-09,3.72587999387666e-08,2.33042651445e-07,
1.30432861022755e-06,6.53256418973207e-06,2.92769215304051e-05,0.000117411919765877,0.000421350998189877,0.00135307204881547,0.00388814878838486,0.00999792527459257,
0.0230049850157856,0.0473673491328143,0.0872732730720535,0.143889301677515,0.212285730899421,0.280258091020883,0.331085814117368,0.35,0.331085814117368,0.280258091020883,
0.212285730899421,0.143889301677515,0.0872732730720535,0.0473673491328143,0.0230049850157856,0.00999792527459257,0.00388814878838486,0.00135307204881547,0.000421350998189877,
0.000117411919765877,2.92769215304051e-05,6.53256418973207e-06,1.30432861022755e-06,2.33042651445009e-07,3.72587999387666e-08,5.33049291064948e-09,6.8241872510604e-10,
7.81771002671117e-11,8.01407195975949e-12,7.35143252456291e-13,6.03442328662433e-14,4.43245794218296e-15,2.91338938694341e-16,1.71355284260513e-17,9.01864988204237e-19,
4.24747283844026e-20,1.79004830613127e-21,6.75062446787362e-23,2.27807598041372e-24,6.87919338457266e-26,1.85888228738763e-27,4.49480978543648e-29,9.72558656410933e-31,
1.88306515600748e-32,3.26257082668948e-34,5.05824204533973e-36,7.01753073686609e-38,8.71192438664679e-40,9.67807378526865e-42,9.62074752768602e-44,8.55802920859455e-46,
6.81214319560016e-48,4.85220152774417e-50,3.09270822612241e-52,1.76394129042294e-54,9.00273280424845e-57,4.11158859486709e-59,1.68031228362174e-61,2.87783350340218e-137,
1.25684138007291e-126,2.01929976923598e-116,1.19351158379274e-106,2.59512331452403e-97,2.07584479010505e-88,6.10853793864176e-80,6.61279699719503e-72,2.63353214678231e-64,
3.85831405896362e-57,2.07951494046179e-50,4.12317751186526e-44,3.00751317294248e-38,8.07027924003171e-33,7.96663837451876e-28,2.89312477194586e-23,3.8651356637325e-19,
1.89962483236415e-15,3.43460226846832e-12,2.28449696170689e-09,5.58997975811805e-07,5.03193941853766e-05,0.00166634948073635,0.0203002924854919,0.0909795989568949,0.15,
0.0909795989568949,0.0203002924854918,0.00166634948073633,5.03193941853772e-05,5.58997975811805e-07,2.28449696170689e-09,3.43460226846832e-12,1.8996248323641e-15,
3.86513566373239e-19,2.89312477194577e-23,7.96663837451876e-28,8.07027924003171e-33,3.00751317294248e-38,4.12317751186526e-44,2.0795149404617e-50,3.8583140589634e-57,
2.63353214678231e-64,6.61279699719503e-72,6.10853793864176e-80,2.07584479010505e-88,2.59512331452381e-97,1.19351158379264e-106,2.01929976923609e-116,1.25684138007291e-126,
2.87783350340218e-137,2.42413262073038e-148,7.51194855991919e-160,8.56356015879566e-172,3.59138214142273e-184,5.54082460273025e-197,3.14502344181786e-210,7.33786115401029e-210,
2.13378994829612e-205,5.55237637475532e-201,1.29285907397047e-196,2.69381976884687e-192,5.02262716353862e-188,8.37989166332065e-184,1.25109683247582e-179,1.67143119193322e-175,
1.99816403705255e-171,2.13756254727719e-167,2.04621649962596e-163,1.75278799731458e-159,1.34354512213737e-155,9.21552708775281e-152,5.65630944837056e-148,3.10664193063266e-144,
1.52684269586402e-140,6.71494484127175e-137,2.6426257403421e-133,9.30623317172376e-130,2.93262988683678e-126,8.26962164935539e-123,2.08669551112372e-119,4.71169946155089e-116,
9.52009183166099e-113,1.72127298211598e-109,2.78486036218291e-106,4.03182945362251e-103,5.22331166516605e-100,6.05528773388889e-97,6.28157698605655e-94,5.83106182932016e-91,
4.84363784357858e-88,3.60031697827339e-85,2.39472071440611e-82,1.42532551901641e-79,7.59133764597358e-77,3.61799209298572e-74,1.54298596601209e-71,-3.46585823410224e-50
};


int testIndex = 0;


void setup() {
  // put your setup code here, to run once:
   Wire.begin();
    Serial.begin(9600);
    IMU.begin();
    Serial.println(" ");
    Serial.println("Started");
}

void loop() {
  // put your main code here, to run repeatedly:
 unsigned long startTime = millis();

    if (testIndex < TEST_DATA){

      // Get the current ECG sample
        float ECG = 10*testData[testIndex++]; // Increment testIndex for the next loop iteration

        // Apply the IIR filter to the ECG sample
        float filteredECG = filter(ECG);

        // Apply Pan-Tompkins for QRS detection
        if (detectQRS(filteredECG)) {
            float heartRate = calculateHeartRate(millis());
            Serial.println(" ");
            Serial.print("Heart Rate: ");
            Serial.print(heartRate);
            Serial.println(" BPM");
        }
        unsigned long endTime = millis();
        unsigned long elapsedTime = endTime - startTime;

        if (elapsedTime < SAMPLINGPERIOD) { //account for the time that has elapsed during program execution when sampling
            delay(SAMPLINGPERIOD - elapsedTime);
        }

      Serial.print(filteredECG);
      Serial.print("     ");
    }    

}

bool detectQRS(float sample) {
    // Differentiate and square (simplified example)
    static float lastSample = 0;
    float derivative = sample - lastSample;
    lastSample = sample;
    float squared = derivative * derivative;

    // Moving window integration
    static int index = 0;
    integratedSignal[index] = squared;
    index = (index + 1) % windowSize;
    float sum = 0;
    for (int i = 0; i < windowSize; i++) {
        sum += integratedSignal[i];
    }
    float integrated = sum / windowSize;

    // Thresholding for QRS detection
    long currentTime = millis();
    if (integrated > threshold && currentTime - lastRPeakTime > REFRACTORY) { // 200 ms refractory period
        lastRPeakTime = currentTime;
        return true; // QRS detected
    }
    return false;
}

float calculateHeartRate(long rPeakTime) {
    static long lastRPeakTime = 0; //not reinitialized to 0 each time because static

    if (lastRPeakTime == 0) { //if this is the first R peak detected 
        lastRPeakTime = rPeakTime;
        return 0; 
    }
    
    float rrInterval = (rPeakTime - lastRPeakTime) / 1000.0; // Convert milliseconds to seconds
    lastRPeakTime = rPeakTime;
    return 60.0 / rrInterval; // BPM
}


//Function for digital IIR Bandpass filter
float filter(float input) { 
    // Shift past samples
    for (int i = N; i > 0; --i) {
        x[i] = x[i - 1];
        y[i] = y[i - 1];
    }

    // Add new sample
    x[0] = input;

    // Compute the filter output
    float output = b[0] * x[0]; // Initialize with the first term
    for (int i = 1; i <= N; ++i) {
        output += b[i] * x[i]; // Apply b coefficients
        output -= a[i] * y[i]; // Apply a coefficients, skipping a[0] as it's assumed to be 1
    }

    y[0] = output;
    return output;
}

