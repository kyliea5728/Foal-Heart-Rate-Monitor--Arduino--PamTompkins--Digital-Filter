#include <Arduino.h>


const int N = 2; //filter order 

//Notch filter coefficients 
float a[] = {1,	-0.521081865933871,	0.649407593197511};
float b[] = {0.824703796598755,	-0.521081865933871,	0.824703796598755};

// Arrays for past samples
float x[N+1] = {0};
float y[N+1] = {0};

//Generated ECG signal to test with
#define TEST_DATA 301 //Size of test data array
float testData[TEST_DATA] ={0,1.15896820711291,0.994521895368274,1.11022302462516e-16,-0.207911690817759,0.866025403784437,1.90211303259031,1.58230714766075,0.4067366430758,-2.22044604925031e-16,0.866025403784436,1.69420134177255,1.17557050458495,-0.181048609216673,-0.743144825477394,-6.12323399573677e-16,0.743144825477394,0.181048609216674,-1.17557050458495,-1.69420134177255,-0.866025403784443,-3.33066907387547e-16,-0.406736643075796,-1.58230714766075,-1.90211303259031,-0.86602540378444,0.207911690817759,1.66533453693773e-15,-0.994521895368272,-1.15896820711291,-1.71450551880629e-15,1.15896820711291,0.994521895368275,1.11022302462516e-15,-0.20791169081776,0.866025403784437,1.90211303259031,1.58230714766075,0.406736643075802,-5.55111512312578e-16,0.86602540378443,1.69420134177255,1.17557050458495,-0.181048609216672,-0.743144825477397,3.49210031947972e-15,0.743144825477393,0.181048609216675,-1.17557050458494,-1.69420134177255,-0.866025403784441,-2.77555756156289e-15,-0.406736643075798,-1.58230714766074,-1.90211303259031,-0.866025403784434,0.207911690817759,7.66053886991358e-15,-0.99452189536827,-1.15896820711291,-3.42901103761259e-15,1.15896820711291,0.994521895368278,-2.22044604925031e-15,-0.20791169081776,0.866025403784428,1.90211303259031,1.58230714766074,0.406736643075803,-3.10862446895044e-15,0.866025403784436,1.69420134177255,1.17557050458495,-0.181048609216665,-0.743144825477395,-1.01670443554694e-14,0.743144825477392,0.181048609216669,-1.17557050458494,-1.69420134177255,-0.866025403784456,-3.21964677141295e-15,-0.406736643075797,-1.58230714766074,-1.90211303259031,-0.86602540378445,0.207911690817759,0,-0.994521895368258,-1.15896820711291,1.26200518375836e-14,1.15896820711291,0.994521895368279,8.77076189453874e-15,-0.207911690817761,0.866025403784442,1.90211303259031,1.58230714766074,0.406736643075816,-3.44169137633799e-15,0.866025403784434,1.69420134177255,1.17557050458496,-0.181048609216686,-0.743144825477397,-7.33550118215235e-16,0.743144825477388,0.181048609216682,-1.17557050458494,-1.69420134177256,-0.866025403784431,4.10782519111308e-15,-0.406736643075796,-1.58230714766075,-1.90211303259031,-0.866025403784451,0.207911690817759,-1.88737914186277e-15,-0.99452189536828,-1.15896820711292,-6.85802207522518e-15,1.15896820711291,0.994521895368291,1.26565424807268e-14,-0.207911690817759,0.86602540378444,1.90211303259031,1.58230714766076,0.406736643075805,-5.55111512312578e-16,0.866025403784418,1.69420134177254,1.17557050458495,-0.181048609216673,-0.743144825477393,-1.26163379537641e-14,0.743144825477392,0.181048609216671,-1.17557050458493,-1.69420134177255,-0.866025403784444,-6.66133814775094e-16,-0.406736643075806,-1.58230714766073,-1.90211303259031,-0.866025403784467,0.207911690817754,1.34336985979644e-14,-0.994521895368268,-1.15896820711291,-2.27833823092335e-14,1.1589682071129,0.994521895368297,2.52020626589911e-14,-0.207911690817769,0.866025403784394,1.9021130325903,1.58230714766077,0.406736643075842,-5.32907051820075e-15,0.866025403784404,1.69420134177254,1.17557050458497,-0.181048609216608,-0.7431448254774,-3.18284371650994e-15,0.743144825477389,0.181048609216711,-1.17557050458494,-1.69420134177256,-0.866025403784462,-1.21014309684142e-14,-0.406736643075747,-1.58230714766072,-1.90211303259032,-0.866025403784486,0.207911690817749,2.02060590481778e-14,-0.994521895368235,-1.15896820711292,-3.87087425432418e-14,1.15896820711289,0.994521895368293,3.1863400806742e-14,-0.207911690817774,0.866025403784435,1.9021130325903,1.58230714766078,0.406736643075808,-1.66533453693773e-14,0.866025403784389,1.69420134177254,1.17557050458501,-0.181048609216648,-0.743144825477394,-6.83563367340663e-14,0.743144825477386,0.181048609216724,-1.1755705045849,-1.69420134177255,-0.866025403784474,-1.67643676718399e-14,-0.40673664307578,-1.58230714766071,-1.90211303259032,-0.86602540378447,0.207911690817748,5.57331958361829e-14,-0.994521895368262,-1.15896820711293,-5.46341027772501e-14,1.1589682071129,0.994521895368305,2.14273043752655e-14,-0.207911690817765,0.86602540378442,1.90211303259029,1.58230714766075,0.406736643075844,-1.26565424807268e-14,0.866025403784455,1.69420134177253,1.17557050458497,-0.181048609216605,-0.743144825477409,-5.53701288180117e-14,0.743144825477382,0.181048609216713,-1.17557050458491,-1.69420134177256,-0.866025403784518,-6.21724893790088e-15,-0.40673664307579,-1.5823071476607,-1.90211303259031,-0.866025403784486,0.207911690817743,2.79776202205539e-14,-0.994521895368256,-1.15896820711292,-1.37160441504504e-14,1.15896820711291,0.994521895368311,-6.32827124036339e-15,-0.20791169081777,0.866025403784404,1.9021130325903,1.58230714766076,0.40673664307581,-1.7430501486615e-14,0.866025403784386,1.69420134177254,1.17557050458498,-0.181048609216638,-0.743144825477403,-1.3962211471553e-14,0.743144825477377,0.18104860921668,-1.1755705045849,-1.69420134177256,-0.86602540378448,-8.88178419700125e-15,-0.406736643075778,-1.58230714766073,-1.90211303259031,-0.866025403784502,0.20791169081776,4.04121180963557e-14,-0.994521895368244,-1.15896820711293,-2.96414043844587e-14,1.15896820711291,0.994521895368324,6.21724893790088e-15,-0.20791169081778,0.866025403784388,1.90211303259029,1.58230714766077,0.406736643075823,-2.20934381900406e-14,0.866025403784427,1.69420134177253,1.17557050458499,-0.181048609216632,-0.743144825477407,-2.93977129859024e-14,0.743144825477383,0.181048609216693,-1.17557050458489,-1.69420134177255,-0.866025403784495,-1.35447209004269e-14,-0.406736643075766,-1.58230714766072,-1.90211303259032,-0.866025403784521,0.207911690817755,4.70734562441066e-14,-0.994521895368231,-1.15896820711293,-4.5566764618467e-14

};

//------------------------------
//Function for digital IIR Bandpass filter
float filter(float input) { 
    // Shift past samples
    for (int i = N; i > 0; --i) {
        x[i] = x[i - 1];
        y[i] = y[i - 1];
    }

    // Add new sample
    x[0] = input;

    // Compute the filter output
    float output = b[0] * x[0]; // Initialize with the first term
    for (int i = 1; i <= N; ++i) {
        output += b[i] * x[i]; // Apply b coefficients
        output -= a[i] * y[i]; // Apply a coefficients, skipping a[0] as it's assumed to be 1
    }

    y[0] = output;
    return output;
}
//------------------------------
void setup() {
    Serial.begin(9600);
    while (!Serial); // for boards that support it
    Serial.println("Filtered Data:");

    for (int i = 0; i < TEST_DATA; ++i) { //filter the Test Data and print to serial monitor
        float filteredValue = filter(testData[i]);
        Serial.print(filteredValue);
        Serial.print("  ");
    }
    Serial.println(" ");
    Serial.println("Done");
}

void loop() {}


